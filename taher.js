var mod_pagespeed_xYiQoe38Oj = "$(document).ready(function () {\n	\n    $('#drpbox-chooser').on('click', function (e) {\n    	e.preventDefault();\n    	Dropbox.appKey = \"kmnvanr1sm5jlg1\";\n        console.log(1);\n\n        var options = {\n\n            // Required. Called when a user selects an item in the Chooser.\n            success: function (files) {\n            	$(`body`).prepend(`<div class='gloader'></div>`);\n                var link = files[0].link;\n                link = link.replace(\"dl=0\", \"dl=1\");\n                \n				createFileFromDropbox(link, files[0].name, false).then(function(file){\n					console.log(\"file is \", file);\n					$(\".gloader\").remove();\n					\n					pdfUploader.fileSelected(false, [file]);\n				});\n        		return false;\n\n//                $.post('/save-file-by-url', {\n//                    service: 'dropbox',\n//                    link: link,\n//                    _token: $('input[name=\"_token\"]').val()\n//                })\n//                .done(function (response) {\n//                	blocker.hide();\n//                    console.log(response);\n//                    pdfUploader.startDropbox(response.data.link);\n//                });\n            },\n\n            // Optional. Called when the user closes the dialog without selecting a file\n            // and does not include any parameters.\n            cancel: function () {\n				\n            },\n\n            // Optional. \"preview\" (default) is a preview link to the document for sharing,\n            // \"direct\" is an expiring link to download the contents of the file. For more\n            // information about link types, see Link types below.\n            linkType: \"direct\", // or \"direct\"\n\n            // Optional. A value of false (default) limits selection to a single file, while\n            // true enables multiple file selection.\n            multiselect: false, // or true\n\n            // Optional. This is a list of file extensions. If specified, the user will\n            // only be able to select files with these extensions. You may also specify\n            // file types, such as \"video\" or \"images\" in the list. For more information,\n            // see File types below. By default, all extensions are allowed.\n            extensions: ['.pdf'],\n\n            // Optional. A value of false (default) limits selection to files,\n            // while true allows the user to select both folders and files.\n            // You cannot specify `linkType: \"direct\"` when using `folderselect: true`.\n            folderselect: false, // or true\n\n            // Optional. A limit on the size of each file that may be selected, in bytes.\n            // If specified, the user will only be able to select files with size\n            // less than or equal to this limit.\n            // For the purposes of this option, folders have size zero.\n            sizeLimit: 50000000 // or any positive number\n        };\n\n        Dropbox.choose(options);\n    });\n});\n";
var mod_pagespeed_fFWPKbUCSc = "$(document).ready(function(){$(\"#save-dropbox\").on('click',async function(){console.log(1);Dropbox.appKey=\"kmnvanr1sm5jlg1\";var options={success:function(){},progress:function(progress){},cancel:function(){},error:function(errorMessage){}};var save_resp=await saveBlobAsFile({blob:viewer.edited_blob,file_name:viewer.pdf_name,create_share:1});Dropbox.save(save_resp.share_link,viewer.pdf_name,options);});});";
var mod_pagespeed_o_y4Sl4q23 = "$(document).ready(function () {\n    $('#gdrive-chooser').on('click', function (e) {\n    	e.preventDefault();\n        loadPicker();\n    });\n\n    // The Browser API key obtained from the Google API Console.\n    // Replace with your own Browser API key, or your own key.\n    var developerKey = 'AIzaSyDlPCZbbC5APwJU792R6WL4bOuwuM_PQsM';\n    var clientId = \"692731351743-kocna8ov0o54it98es2hvlsrhg3avb6i.apps.googleusercontent.com\";\n    var appId = \"692731351743\";\n    \n\n\n//    var developerKey = 'AIzaSyAawW_4yft1xLYQWpQ5-mRewgOVbbmDc4Y';\n//	var clientId = \"708318393409-pmq3bb6bk5bcbcgh91e824sduvaq3976.apps.googleusercontent.com\";\n//    var appId = \"708318393409\";    \n//    \n    \n\n\n    var scope = ['https://www.googleapis.com/auth/drive'];\n    var scope = ['https://www.googleapis.com/auth/drive.file'];    \n\n    var pickerApiLoaded = false;\n    var oauthToken;\n\n    // Use the Google API Loader script to load the google.picker script.\n    function loadPicker() {\n        gapi.load('auth', {'callback': onAuthApiLoad});\n        gapi.load('picker', {'callback': onPickerApiLoad});\n    }\n\n    function onAuthApiLoad() {\n        window.gapi.auth.authorize(\n            {\n                'client_id': clientId,\n                'scope': scope,\n                'immediate': false\n            },\n            handleAuthResult);\n    }\n\n    function onPickerApiLoad() {\n        pickerApiLoaded = true;\n        createPicker();\n    }\n\n    function handleAuthResult(authResult) {\n        if (authResult && !authResult.error) {\n            oauthToken = authResult.access_token;\n            createPicker();\n        }\n    }\n\n    // Create and render a Picker object for searching images.\n    function createPicker() {\n        if (pickerApiLoaded && oauthToken) {\n            var view = new google.picker.View(google.picker.ViewId.DOCS);\n            \n            if(typeof ALLOW_FILE_EXT!='undefined'){\n            	view.setMimeTypes(ALLOW_FILE_EXT);\n            }else{\n            	view.setMimeTypes(\"application/pdf\");\n            }\n            var picker = new google.picker.PickerBuilder()\n                .enableFeature(google.picker.Feature.NAV_HIDDEN)\n                .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)\n                .setAppId(appId)\n                .setOAuthToken(oauthToken)\n                .addView(view)\n                .addView(new google.picker.DocsUploadView())\n                .setDeveloperKey(developerKey)\n                .setCallback(pickerCallback)\n                .build();\n            picker.setVisible(true);\n        }\n    }\n    \n\n\n\n    \n\n    // A simple callback implementation.\n    function pickerCallback(data) {\n    \n    \n        if (data.action == google.picker.Action.PICKED) {\n			$(`body`).prepend(`<div class='gloader'></div>`);\n\n            gapi.client.load(\"https://content.googleapis.com/discovery/v1/apis/drive/v2/rest\")\n                .then(function() {\n                	if(typeof blocker !=='undefined'){\n                		blocker.show();\n                	}\n\n\n                    gapi.client.drive.files.get({\n                        \"fileId\": data.docs[0].id\n                    })\n                    .then(function(response) {\n                        if (response.result.downloadUrl) {\n\n\n							var fileId = data.docs[0].id;\n							var accessToken = gapi.auth.getToken().access_token;\n							var file_name = data.docs[0].name;\n							var downloadUrl = \"https://www.googleapis.com/drive/v3/files/\"+fileId+\"?alt=media\"\n                        \n                            var accessToken = gapi.auth.getToken().access_token;\n                        	var file_name = (response.result.originalFilename);\n                        	console.log(\"file_name\", file_name);\n\n                        	if(typeof A_TOOL!='undefined' && A_TOOL){\n								createFile2(downloadUrl, file_name, accessToken).then(function(file){\n									console.log(\"file is \", file);\n									A_TOOL.fileSelected(false, file);\n									$(\".gloader\").remove();\n								});\n                        		return false;\n                        	}\n                        	\n                        	if(typeof PDFTOOLS!='undefined' && PDFTOOLS.name){\n								createFile2(downloadUrl, file_name, accessToken).then(function(file){\n									console.log(\"file is \", file);\n									pdfUploader.fileSelected(false, [file]);\n									$(\".gloader\").remove();\n								});\n                        		return false;\n                        	}\n							$(`body`).prepend(`<div class='gloader'></div>`);\n							createFile2(downloadUrl, file_name, accessToken).then(function(file){\n								pdfUploader.fileSelected(false, [file]);\n								$(\".gloader\").remove();\n							});\n							\n\n							return false;\n\n                        } else {\n                            console.log(null);\n                        }\n                    },\n                    function(err) { \n                    \n                    $(\".gloader\").remove();\n                    console.error(\"Execute error\", err); });\n\n                },\n                function(err) { console.error(\"Error loading GAPI client for API\", err); });\n        }\n    }\n});\n";
var mod_pagespeed_O_19jboyev = "$(document).ready(function(){$(document).on(\"after_save_file\",function(e,data){if(typeof gapi!='undefined'){if(typeof data.file_name=='undefined'){data.file_name=data.new_file_name;}gapi.savetodrive.render('savetodrive-div',{src:'//deftpdf.com/'+data.url,filename:data.file_name,sitename:'Deft PDF'});}});$('#icon-gdrive-save').on('click',async function(){if(typeof viewer!='undefined'){if(typeof gapi!='undefined'){var save_resp=await saveBlobAsFile({blob:viewer.edited_blob,file_name:viewer.pdf_name,create_share:1});gapi.savetodrive.render('savetodrive-div',{src:save_resp.share_link,filename:viewer.pdf_name,sitename:'Deft PDF'});}}else{console.log('click');$('#save-to-drive-button > iframe').click();}});});";
